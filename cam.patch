diff -u a/src/.objects b/src/.objects
--- a/src/.objects	
+++ b/src/.objects	
@@ -8,6 +8,7 @@
 	smart_allocate.o \
 	xml.o \
 	constant.o \
+  cam.o \
 	jacobi.o  \
 	main_mpi.o \
 	scala.o \
diff --git a/src/cam.F b/src/cam.F
new file mode 100644
index 0000000..1d87317
--- /dev/null
+++ b/src/cam.F
@@ -0,0 +1,320 @@
+      MODULE cam 
+        USE prec 
+       !INTEGER, PARAMETER :: q     = SELECTED_REAL_KIND(10)
+        REAL(q), SAVE      :: MU    = 0.0_q
+        REAL(q), SAVE      :: CAMFA = 0.0_q
+        REAL(q), SAVE      :: CAMFB = 0.0_q
+      CONTAINS
+      SUBROUTINE NSPCAM(R,D,F,V1,VD1,CU,CA,CB,CLYP,CVWN)
+        IMPLICIT REAL(q) (A-Z)
+        REAL(q), INTENT(IN)  :: R,D,CU,CA,CB,CLYP,CVWN
+        REAL(q), INTENT(OUT) :: F,V1,VD1
+       !Local variables
+        REAL(q) R1,D1
+        REAL(q) FCAM,FVWN,FLYP
+        REAL(q) VCAM1,VCAM2,DCAM1,DCAM2
+        REAL(q) VVWN1,VLYP1,DLYP1
+        REAL(q) VVWN2,VLYP2,DLYP2
+        R1    = R/2._q
+        D1    = D/2._q
+        CAMFA = CA
+        CAMFB = CB
+        MU    = CU
+        CALL NSPB88(R1,R1,D1,D1,FCAM,VCAM1,VCAM2,DCAM1,DCAM2)
+        CALL   LYP(R1,R1,D1,D1,FLYP,VLYP1,VLYP2,DLYP1,DLYP2,CLYP)
+        CALL   VWN(R1,R1,FVWN,VVWN1,VVWN2,CVWN)
+        F     = FCAM  + FLYP  + FVWN
+        V1    = VCAM1 + VLYP1 + VVWN1
+        VD1   = DCAM1 + DLYP1 
+        RETURN
+      END SUBROUTINE NSPCAM
+      SUBROUTINE SPNCAM(R1,R2,D1,D2,F,V1,V2,VD1,VD2,CU,CA,CB,CLYP,CVWN)
+        IMPLICIT REAL(q) (A-Z)
+        REAL(q), INTENT(IN)  :: R1,R2,D1,D2,CU,CA,CB,CLYP,CVWN
+        REAL(q), INTENT(OUT) :: F,V1,V2,VD1,VD2
+       !Local variables
+        REAL(q) FCAM,FVWN,FLYP
+        REAL(q) VCAM1,VCAM2,DCAM1,DCAM2
+        REAL(q) VVWN1,VLYP1,DLYP1
+        REAL(q) VVWN2,VLYP2,DLYP2
+        CAMFA = CA
+        CAMFB = CB
+        MU    = CU
+        CALL   VWN(R1,R2,FVWN,VVWN1,VVWN2,CVWN)
+        CALL   LYP(R1,R2,D1,D2,FLYP,VLYP1,VLYP2,DLYP1,DLYP2,CLYP)
+        CALL SPNB88(R1,R2,D1,D2,FCAM,VCAM1,VCAM2,DCAM1,DCAM2)
+        F     = FCAM  + FLYP  + FVWN
+        V1    = VCAM1 + VLYP1 + VVWN1
+        VD1   = DCAM1 + DLYP1
+        V2    = VCAM2 + VLYP2 + VVWN2
+        VD2   = DCAM2 + DLYP2 
+        RETURN
+      END SUBROUTINE SPNCAM
+      SUBROUTINE SPNB88(R1,R2,D1,D2,F,V1,V2,VV1,VV2)
+        IMPLICIT REAL(q) (A-Z)
+        REAL(q), INTENT(IN)  :: R1,R2,D1,D2
+        REAL(q), INTENT(OUT) :: F,V1,V2,VV1,VV2
+        REAL(q) F1,F2
+        F1  = 0._q
+        F2  = 0._q
+        V1  = 0._q
+        V2  = 0._q
+        VV1 = 0._q
+        VV2 = 0._q
+        CALL CAM_B88(R1,D1,F1,V1,VV1)
+        CALL CAM_B88(R2,D2,F2,V2,VV2)
+        F   = F1 + F2
+        RETURN
+      END SUBROUTINE SPNB88
+      SUBROUTINE NSPB88(R1,R2,D1,D2,F,V1,V2,VV1,VV2)
+        IMPLICIT REAL(q) (A-Z)
+        REAL(q), INTENT(IN)  :: R1,R2,D1,D2
+        REAL(q), INTENT(OUT) :: F,V1,V2,VV1,VV2
+        REAL(q) F1
+        V2  = 0._q
+        VV2 = 0._q
+        CALL CAM_B88(R1,D1,F1,V1,VV1)
+        F   = F1 + F1
+        RETURN
+      END SUBROUTINE NSPB88
+      SUBROUTINE CAM_B88(R,DR,F,V,VV)
+        IMPLICIT REAL(q) (A-Z)
+        REAL(q), INTENT(IN)  :: R,DR
+        REAL(q), INTENT(OUT) :: F,V,VV
+        REAL(q) Ep,Ef,DKN,DKG
+        REAL(q) KG,K,H,HR,HD,SQ,DAR
+        REAL(q) A,B,C,AA,AAA,AAAA,DEN,ARC
+        REAL(q) R13,R43,X,XX,PIS,DENH,DEND
+        REAL(q) DSQ,DKX,DXN,DXG,TRM
+        REAL(q), PARAMETER :: F1o2 = 1._q/2._q 
+        REAL(q), PARAMETER :: F1o3 = 1._q/3._q 
+        REAL(q), PARAMETER :: F1o4 = 1._q/4._q 
+        REAL(q), PARAMETER :: F3o4 = 3._q/4._q 
+        REAL(q), PARAMETER :: F1o6 = 1._q/6._q 
+        REAL(q), PARAMETER :: F3o2 = 3._q/2._q
+        REAL(q), PARAMETER :: F2o3 = 2._q/3._q 
+        REAL(q), PARAMETER :: F4o3 = 4._q/3._q 
+        REAL(q), PARAMETER :: F8o3 = 8._q/3._q 
+        REAL(q), PARAMETER :: BETA = 0.0042_q
+        REAL(q), PARAMETER :: BET2 = 0.0042_q*0.0042_q
+        REAL(q), PARAMETER :: B6   = 0.0252_q
+        REAL(q), PARAMETER :: PI   = 4._q*ATAN(1._q) 
+        REAL(q), PARAMETER :: CX   = F3o2*((F3o4/PI)**F1o3)
+       !REAL(q), PARAMETER :: MU   = 0.23_q 
+       !REAL(q), PARAMETER :: CAMFA= 0.19_q
+       !REAL(q), PARAMETER :: CAMFB= 0.36_q
+        PIS = SQRT(PI)
+        R13 = R**F1o3
+        R23 = R13*R13
+        R43 = R13*R
+        R63 = R23*R43
+        R53 = R13*R43
+        R73 = R*R43
+        ADR = ABS(DR)
+        X   = ADR/R43 
+        XX  = X*X
+        XXX = XX*X
+        SQ  = SQRT(XX+1._q)
+        ARC = LOG(X+SQ)
+        DEN = 1._q + B6*X*ARC 
+        KG  = 2._q*BETA*XX/DEN
+        K   = KG+2._q*CX
+        F   = -F1o2*K*R43
+        DKX = KG*(2._q/X-(B6*(X/SQ+ARC)/DEN))
+        DXR = -F4o3*X/R
+        DXG = 1._q/R43
+        DKR = DKX*DXR
+        DKG = DKX*DXG
+        V   =-F1o2*(F4o3*K*R13+R43*DKR) 
+        VV  =-F1o2*R43*DKG
+        VV  = SIGN(1._q,DR)*VV
+        SQK = SQRT(K)
+        A   = SQK*MU*F1o6/PIS/R13
+        AA  = A*A
+        AAA = AA*A
+        AAAA= AA*AA
+        Ep  = Exp(-F1o4/AA)
+        Ef  = Erf(F1o2/A)
+        Efp = PIS*Ef
+        B   = Ep - 1._q
+        C   = 2._q*AA*B + F1o2
+        H   = 1._q - CAMFA - CAMFB*F8o3*A*(Efp+2._q*A*(B-C))
+        IF (H.LT.0.35_q.OR.Ef.LT.0.1_q) THEN
+          H = 0.35_q
+          F = F *H
+          V = V *H
+          VV= VV*H
+          RETURN
+        ELSE
+          F   = H*F
+          V   = V*H 
+          VV  = VV*H
+          Efa = -1._q*Ep/AA
+          DBA = F1o2*Ep/AAA
+          DCA = 4._q*A*B+2._q*AA*DBA
+          DHA = -F8o3*((Efp +2._q*A*(B-C)) + &
+                     A*(Efa+(2._q*(B-C)+2._q*A*(DBA-DCA))))
+          DAR = MU/(6._q*PIS)*(F1o2*DKR/SQK/R13-F1o3*SQK/R43)
+          DAG = MU/(6._q*PIS*R13)*(F1o2*DKG/SQK)
+          DHR = DHA*DAR*CAMFB
+          DHG = DHA*DAG*CAMFB
+          V   = V - DHR*K*R43*F1o2
+          VV  = VV- DHG*K*R43*F1o2
+        ENDIF
+        RETURN 
+      END SUBROUTINE CAM_B88
+      SUBROUTINE VWN(r1,r2,energy,va,vb,cvwn)
+        IMPLICIT NONE
+        REAL(q),  INTENT(in)  :: r1, r2, cvwn
+        REAL(q),  INTENT(out) :: energy, va, vb 
+        REAL(q),  PARAMETER   :: facx=0.787623317899743D00 ! (3/(4*pi))**(1/6)
+        REAL(q),  PARAMETER   :: fach=1.709920934161366D00 ! 4/(9*(2**(1/3)-1))
+        REAL(q),  PARAMETER   :: prmqp=6.15199081975908D00 ! Qp=sqrt(4*cp-bp*bp)
+        REAL(q),  PARAMETER   :: prmqf=4.73092690956011D00 ! Qf=sqrt(4*cf-bf*bf)
+        REAL(q),  PARAMETER   :: prmqa=7.12310891781812D00 ! Qa=sqrt(4*ca-ba*ba)
+        REAL(q),  PARAMETER   :: prmqpinv=0.1625490071910D00 ! 1/Qp
+        REAL(q),  PARAMETER   :: prmqfinv=0.211375068589462D0 ! 1/Qf
+        REAL(q),  PARAMETER   :: prmqainv=0.14038813831676D0 ! 1/Qa
+        REAL(q),  PARAMETER   :: prmxx0pinv=7.9650086660586D-2 ! 1/Xx0p=1/(x0p*x0p+bp*x0p+cp)
+        REAL(q),  PARAMETER   :: prmxx0finv=6.3016782913201D-2 ! 1/Xx0f=1/(x0f*x0f+bf*x0f+cf)
+        REAL(q),  PARAMETER   :: prmxx0ainv=7.6928162709702D-2 ! 1/Xx0a=1/(x0a*x0a+ba*x0a+ca)
+        REAL(q),  PARAMETER   :: prmap=3.10907D-02, prmbp=3.72744D0, prmcp=1.29352D1
+        REAL(q),  PARAMETER   :: prmaf=1.554535D-02, prmbf=7.06042D0, prmcf=1.80578D1
+        REAL(q),  PARAMETER   :: prmaa=-1.688686D-02, prmba=1.13107D0, prmca=1.30045D1
+        REAL(q),  PARAMETER   :: prmx0p=-0.10498D+00, prmx0f=-0.325D0, prmx0a=-0.0047584D0
+        REAL(q),  PARAMETER   :: prmp2=9.690227711544374D-4  ! -ap*bp*x0p/Xx0p
+        REAL(q),  PARAMETER   :: prmf2=2.247867095542611D-3  ! -af*bf*x0f/Xx0f
+        REAL(q),  PARAMETER   :: prma2=-6.991730719309994D-6 ! -aa*ba*x0a/Xx0a
+        REAL(q),  PARAMETER   :: prmp3=3.878329487811301D-2  ! ap*2*bp/Qp*(cp-x0p*x0p)/Xx0p
+        REAL(q),  PARAMETER   :: prmf3=5.249139316978093D-2  ! af*2*bf/Qf*(cf-x0f*x0f)/Xx0f
+        REAL(q),  PARAMETER   :: prma3=-5.365090596990275D-3 ! aa*2*ba/Qa*(ca-x0a*x0a)/Xx0a
+        REAL(q),  PARAMETER   :: one=1.0D+00, two=2.D0, onethird=0.3333333333333333D0
+        REAL(q),  PARAMETER   :: onesixth=0.1666666666666666D0, four=4.D0
+        REAL(q),  PARAMETER   :: fourthird=1.333333333333333D0, nineeighth=1.125D0
+        REAL(q),  PARAMETER   :: onehalf=1.5D0
+        REAL(q) :: rhoa, rhob, rhot, x, xxp, xxf, xxa, xxpinv, xxfinv, xxainv, tmp1p, tmp2p, tmp3p
+        REAL(q) :: tmp1f, tmp2f, tmp3f, tmp1a, tmp2a, tmp3a, epsp, epsf, epsa, xbq2p, xbq2f, xbq2a
+        REAL(q) :: depsp, depsf, depsa, xbp, xbf, xba, bracketp, bracketf, bracketa, hx, dhx
+        REAL(q) :: zeta, zeta2, zeta3, zeta4, gzeta, dgzeta, vwnpot, dvwnpot1, dvwnpot2
+        rhoa= MAX(1.E-10_q,r1)
+        rhob= MAX(1.E-10_q,r2)
+        rhot= rhoa+rhob
+        x= facx*(rhot**(-onesixth))
+        xxp= x*x+prmbp*x+prmcp
+        xxf= x*x+prmbf*x+prmcf
+        xxa= x*x+prmba*x+prmca
+        xxpinv=one/xxp
+        xxfinv=one/xxf
+        xxainv=one/xxa
+        xbp= two*x+prmbp
+        xbf= two*x+prmbf
+        xba= two*x+prmba
+        tmp1p= log(x*x*xxpinv)
+        tmp1f= log(x*x*xxfinv)
+        tmp1a= log(x*x*xxainv)
+        tmp2p= log((x-prmx0p)*(x-prmx0p)*xxpinv)
+        tmp2f= log((x-prmx0f)*(x-prmx0f)*xxfinv)
+        tmp2a= log((x-prmx0a)*(x-prmx0a)*xxainv)
+        tmp3p= atan(prmqp/xbp)
+        tmp3f= atan(prmqf/xbf)
+        tmp3a= atan(prmqa/xba)
+        epsp= prmap*tmp1p+prmp2*tmp2p+prmp3*tmp3p
+        epsf= prmaf*tmp1f+prmf2*tmp2f+prmf3*tmp3f
+        epsa= prmaa*tmp1a+prma2*tmp2a+prma3*tmp3a
+        xbq2p= one/(xbp*xbp+prmqp*prmqp)
+        xbq2f= one/(xbf*xbf+prmqf*prmqf)
+        xbq2a= one/(xba*xba+prmqa*prmqa)
+        bracketp= two/(x-prmx0p)-xbp*xxpinv-four*(two*prmx0p+prmbp)*xbq2p
+        bracketf= two/(x-prmx0f)-xbf*xxfinv-four*(two*prmx0f+prmbf)*xbq2f
+        bracketa= two/(x-prmx0a)-xba*xxainv-four*(two*prmx0a+prmba)*xbq2a
+        depsp=prmap*(two/x-xbp*xxpinv-four*prmbp*xbq2p-prmbp*prmx0p*prmxx0pinv*bracketp)
+        depsf=prmaf*(two/x-xbf*xxfinv-four*prmbf*xbq2f-prmbf*prmx0f*prmxx0finv*bracketf)
+        depsa=prmaa*(two/x-xba*xxainv-four*prmba*xbq2a-prmba*prmx0a*prmxx0ainv*bracketa)
+        hx= fach*(epsf-epsp)/epsa-one
+        dhx= fach*(depsf-depsp-(epsf-epsp)*depsa/epsa)/epsa
+        zeta=(rhoa-rhob)/rhot
+        zeta2= zeta *zeta
+        zeta3= zeta2*zeta
+        zeta4= zeta2*zeta2
+        gzeta= nineeighth*((one+zeta)**fourthird+(one-zeta)**fourthird-two)
+        dgzeta= onehalf*((one+zeta)**onethird-(one-zeta)**onethird)
+        vwnpot= epsp+epsa*gzeta*(one+hx*zeta4)
+        energy= cvwn*rhot*vwnpot
+        dvwnpot1=-x*onesixth*(depsp+depsa*gzeta*(one+hx*zeta4)+epsa*gzeta*dhx*zeta4)
+        dvwnpot2= epsa*(dgzeta*(one+hx*zeta4)+four*gzeta*hx*zeta3)
+        va= cvwn*(vwnpot+dvwnpot1+dvwnpot2*(one-zeta))
+        vb= cvwn*(vwnpot+dvwnpot1-dvwnpot2*(one+zeta))
+        return
+      END SUBROUTINE VWN 
+      SUBROUTINE LYP(r1,r2,grhoa,grhob,energy,va,vb,vda,vdb,clyp)
+        IMPLICIT NONE
+        REAL(q),  INTENT(in)  :: r1, r2, grhoa, grhob, clyp
+        REAL(q),  INTENT(out) :: va,vda,vb,vdb,energy
+        REAL(q),  PARAMETER   :: face=3.646239897876478D+01 ! 2**(11/3)*3/10*(3*pi*pi)**(2/3)
+        REAL(q),  PARAMETER   :: prma=0.04918D+00, prmb=0.132D+00, prmc=0.2533D+00, prmd=0.349D+00
+        REAL(q),  PARAMETER   :: half=0.5D+00, one=1.0D+00, two=2.0D+00, three=3.0D+00, four=4.0D+00
+        REAL(q),  PARAMETER   :: five=5.0D+00, seven=7.0D+00, eleven=11.0D+00, p47=47.0D+00
+        REAL(q),  PARAMETER   :: onethird=0.3333333333333333D+00, oneninth=0.1111111111111111D+00
+        REAL(q),  PARAMETER   :: fourthird=1.333333333333333D+00, eightthird=2.6666666666666666D+00
+        REAL(q),  PARAMETER   :: p11third=3.666666666666666D+00
+        REAL(q) :: rhoa,rhob,rhot, rhoab, rhot13, rhotinv, rhot13inv, rhot43inv, rhot53inv, rhoa83, rhob83
+        REAL(q) :: rhoatinv, rhobtinv, denom, omega, delta, delta11a, delta11b, omegap, deltap
+        REAL(q) :: gradaa, gradab, gradbb, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9
+        REAL(q) :: tmp10, tmp11,rhoa13,rhob13,tmp12
+        REAL(q) :: dlypaa, dlypab, dlypbb, dlypaaa, dlypaab, dlypabb, dlypbaa, dlypbab, dlypbbb
+        rhoa       = MAX(r1,0.1E-10_q)
+        rhob       = MAX(r2,0.1E-10_q)
+        rhot       = rhoa+rhob
+        rhoab      = rhoa*rhob
+        rhot13     = rhot**onethird
+        rhoa13     = rhoa**onethird
+        rhob13     = rhob**onethird
+        rhotinv    = one/rhot
+        rhot13inv  = rhot13*rhot13*rhotinv
+        rhot43inv  = rhotinv*rhot13inv
+        rhot53inv  = rhotinv*rhot13inv*rhot13inv
+        rhoa83     = rhoa*rhoa*rhoa13*rhoa13
+        rhob83     = rhob*rhob*rhob13*rhob13
+        rhoatinv   = rhoa*rhotinv
+        rhobtinv   = rhob*rhotinv
+        denom      = one/(one+prmd*rhot13inv)
+        omega      = exp(-prmc*rhot13inv)*denom*rhot53inv*rhot53inv*rhot13inv*prma*prmb
+        delta      = prmc*rhot13inv+prmd*rhot13inv*denom
+        delta11a   = (delta-eleven)*rhoatinv
+        delta11b   = (delta-eleven)*rhobtinv
+        gradaa     = grhoa*grhoa   
+        gradab     = grhoa*grhob   
+        gradbb     = grhob*grhob   
+        tmp1       = oneninth*rhoab
+        tmp2       = four*prma*denom*rhob*rhoatinv
+        dlypaa     =-omega*(tmp1*(one-three*delta-delta11a)-rhob*rhob)
+        dlypab     =-omega*(tmp1*(p47-seven*delta)-fourthird*rhot*rhot)
+        dlypbb     =-omega*(tmp1*(one-three*delta-delta11b)-rhoa*rhoa)
+        tmp3       = dlypaa*gradaa+dlypab*gradab+dlypbb*gradbb
+        energy     = clyp*(-tmp2-face*omega*rhoab*(rhoa83+rhob83)+tmp3)
+        omegap     =-onethird*rhot43inv*(eleven*rhot13-prmc-prmd*denom)
+        deltap     = onethird*(prmd*prmd*rhot53inv*denom*denom-rhotinv*delta)*oneninth*rhoab
+        tmp4       = oneninth*rhob*(one-three*delta-delta11a)-(three+rhoatinv)*deltap
+        tmp5       = oneninth*rhob*(one-three*delta-delta11b)-(three+rhobtinv)*deltap
+        dlypaaa    = omegap*dlypaa-omega*(tmp4-oneninth*rhoab*delta11b*rhotinv)
+        dlypaab    = omegap*dlypab-omega*(oneninth*rhob*(p47-seven*delta)-seven*deltap-eightthird*rhot)
+        dlypabb    = omegap*dlypbb-omega*(tmp5+oneninth*rhoab*delta11b*rhotinv-two*rhoa)
+        tmp6       =-four*prma*denom*rhobtinv*(onethird*prmd*rhot43inv*denom*rhoa+one-rhoatinv)
+        tmp7       =-face*omega*rhob*(omegap*rhoa*(rhoa83+rhob83)+(p11third*rhoa83+rhob83))
+        tmp8       = dlypaaa*gradaa+dlypaab*gradab+dlypabb*gradbb
+        tmp9       = clyp*(dlypaa+dlypab+dlypbb)
+        tmp4       = oneninth*rhoa*(one-three*delta-delta11a)-(three+rhoatinv)*deltap
+        tmp5       = oneninth*rhoa*(one-three*delta-delta11b)-(three+rhobtinv)*deltap
+        dlypbaa    = omegap*dlypaa-omega*(tmp4+oneninth*rhoab*delta11a*rhotinv-two*rhob)
+        dlypbab    = omegap*dlypab-omega*(oneninth*rhoa*(p47-seven*delta)-seven*deltap-eightthird*rhot)
+        dlypbbb    = omegap*dlypbb-omega*(tmp5-oneninth*rhoab*delta11a*rhotinv)
+        tmp10      =-four*prma*denom*rhoatinv*(onethird*prmd*rhot43inv*denom*rhob+one-rhobtinv)
+        tmp11      =-face*omega*rhoa*(omegap*rhob*(rhoa83+rhob83)+(rhoa83+p11third*rhob83))
+        tmp12      = dlypbaa*gradaa+dlypbab*gradab+dlypbbb*gradbb
+        va         = clyp*(tmp6+tmp7+tmp8)
+        vda        = clyp*(two*dlypaa*grhoa+dlypab*grhob)
+        vb         = clyp*(tmp10+tmp11+tmp12)
+        vdb        = clyp*(two*dlypbb*grhob+dlypab*grhoa)
+        return
+      END SUBROUTINE LYP
+      END MODULE cam 
diff --git a/src/fock.F b/src/fock.F
index f352a59..ae6ea9e 100644
--- a/src/fock.F
+++ b/src/fock.F
@@ -134,6 +134,18 @@ MODULE fock
   ! LRSCOR=.FALSE. Complete LDA correlation
   LOGICAL       :: LRSCOR      
 
+#ifdef usecam
+  ! LHFCAM CAM HF interaction full-range + long-range
+  ! the variable should be identical to LUSE_CAM in xclib
+  LOGICAL       :: LHFCAM
+  ! CAMFA  alpha 
+  ! CAMFB  beta  
+  ! CAMFU  omega 
+  REAL(q)       :: CAMFA = 0.19_q
+  REAL(q)       :: CAMFB = 0.36_q
+  REAL(q)       :: CAMFU = 0.23_q
+#endif
+
   ! LRHFCALC long range HF interaction only
   ! the default is short range HF interaction only
   ! the variable should be identical to LUSE_LONGRANGE_HF in xclib
@@ -303,7 +315,14 @@ CONTAINS
 ! rVV10
       BPARAM = 6.3_q 
       CPARAM = 0.0093_q
-      
+
+#ifdef usecam
+      CAMFA  = 0.19_q
+      CAMFB  = 0.36_q
+      CAMFU  = 0.23_q
+      LHFCAM = .FALSE.
+#endif
+
       LRSCOR=.FALSE.
       LHFCALC=CALCULATE_RESPONSE_FUNCTIONS().OR.LDMATRIX()
       LRHFCALC=.FALSE.
@@ -399,7 +418,46 @@ CONTAINS
       IF (L_MODEL_HF) THEN
          LRHFCALC=.FALSE.
       END IF
+#ifdef usecam
+! CAM HF 
+      CALL RDATAB(LOPEN,INCAR,IU5,'LHFCAM','=','#',';','L', &
+     &            IDUM,RDUM,CDUM,LHFCAM,CHARAC,N,1,IERR)
+      IF (((IERR/=0).AND.(IERR/=3)).OR. &
+     &                    ((IERR==0).AND.(N<1))) THEN
+         IF (IU0>=0) &
+         WRITE(IU0,*)'Error reading item ''LHFCAM'' from file INCAR.'
+         LHFCAM=.FALSE.
+      ENDIF
+      CALL XML_INCAR('LHFCAM','L',IDUM,RDUM,CDUM,LHFCAM,CHARAC,N)
+!Read Parameters CAMFA, CAMFB, CAMFU
+      CALL RDATAB(LOPEN,INCAR,IU5,'CAMFA','=','#',';','F', &
+           &            IDUM,CAMFA,CDUM,LDUM,CHARAC,N,1,IERR)
+
+      IF (((IERR/=0).AND.(IERR/=3)).OR. &
+           &                    ((IERR==0).AND.(N<1))) THEN
+         IF (IU0>=0) &
+              WRITE(IU0,*)'Error reading item ''CAMFA'' from file INCAR.'
+      ENDIF
+      CALL XML_INCAR('CAMFA','F',IDUM,CAMFA,CDUM,LDUM,CHARAC,N)
+      CALL RDATAB(LOPEN,INCAR,IU5,'CAMFB','=','#',';','F', &
+           &            IDUM,CAMFB,CDUM,LDUM,CHARAC,N,1,IERR)
+
+      IF (((IERR/=0).AND.(IERR/=3)).OR. &
+           &                    ((IERR==0).AND.(N<1))) THEN
+         IF (IU0>=0) &
+              WRITE(IU0,*)'Error reading item ''CAMFB'' from file INCAR.'
+      ENDIF
+      CALL XML_INCAR('CAMFB','F',IDUM,CAMFB,CDUM,LDUM,CHARAC,N)
+      CALL RDATAB(LOPEN,INCAR,IU5,'CAMFU','=','#',';','F', &
+           &            IDUM,CAMFU,CDUM,LDUM,CHARAC,N,1,IERR)
 
+      IF (((IERR/=0).AND.(IERR/=3)).OR. &
+           &                    ((IERR==0).AND.(N<1))) THEN
+         IF (IU0>=0) &
+              WRITE(IU0,*)'Error reading item ''CAMFU'' from file INCAR.'
+      ENDIF
+      CALL XML_INCAR('CAMFU','F',IDUM,CAMFU,CDUM,LDUM,CHARAC,N)
+#endif
 
       CALL RDATAB(LOPEN,INCAR,IU5,'LTHOMAS','=','#',';','L', &
      &            IDUM,RDUM,CDUM,L_THOMAS_FERMI,CHARAC,N,1,IERR)
@@ -437,7 +495,11 @@ CONTAINS
 
 ! If range separation, THOMAS fermi screening or four orbital terms are demanded 
 ! the calculation of the Fock exchange should be switched on as well
+#ifdef usecam
+      IF (LHFCAM .OR. LRSCOR .OR. LRHFCALC .OR. L_MODEL_HF .OR. L_THOMAS_FERMI .OR. FOURORBIT>0) THEN
+#else
       IF (LRSCOR .OR. LRHFCALC .OR. L_MODEL_HF .OR. L_THOMAS_FERMI .OR. FOURORBIT>0) THEN
+#endif
          LHFCALC=.TRUE.
       ENDIF
 
@@ -858,6 +920,11 @@ CONTAINS
 ! Thomas-Fermi and model GW: q_TF
 ! Scuserias default: 0.6 A-1
 !
+
+#ifdef usecam
+        IF (LHFCAM) HFSCREEN = CAMFU
+#endif
+
          CALL RDATAB(LOPEN,INCAR,IU5,'HFSCREEN','=','#',';','F', &
               &            IDUM,HFSCREEN,CDUM,LDUM,CHARAC,N,1,IERR)
          IF (((IERR/=0).AND.(IERR/=3)).OR. &
@@ -900,7 +967,11 @@ CONTAINS
          ! M. Ernzerhof, G. E. Scuseria, J. Chem. Phys. 110, 5029 (1999)
          ! B3LYP parameters  AEXX=0.2 ; AGGAX=0.72 ; AGGAC=0.81
 
+#ifdef usecam
+         IF (LHFCAM .OR. LRHFCALC .OR. L_THOMAS_FERMI .OR. MODEL_GW>0 .OR. EXXOEP/=0 .OR. USE_OEP_IN_GW()) THEN
+#else
          IF (LRHFCALC .OR. L_THOMAS_FERMI .OR. MODEL_GW>0 .OR. EXXOEP/=0 .OR. USE_OEP_IN_GW()) THEN
+#endif
             AEXX=1.0
          ENDIF
          CALL RDATAB(LOPEN,INCAR,IU5,'AEXX','=','#',';','F', &
@@ -921,6 +992,16 @@ CONTAINS
             ALDAC=0.0
             AGGAC=0.0
          ENDIF
+#ifdef usecam
+         IF (LHFCAM) THEN
+           LDAX   = 1.0_q
+           AGGAX  = 1.0_q
+           ALDAC  = 0.19_q
+           AGGAC  = 0.81_q
+           FCAMA  = CAMFA
+           FCAMB  = CAMFB
+         ENDIF
+#endif
 
          CALL RDATAB(LOPEN,INCAR,IU5,'AGGAX','=','#',';','F', &
               &            IDUM,AGGAX,CDUM,LDUM,CHARAC,N,1,IERR)
@@ -1065,6 +1146,9 @@ CONTAINS
       LUSE_LONGRANGE_HF=LRHFCALC
       LUSE_THOMAS_FERMI=L_THOMAS_FERMI
       LUSE_MODEL_HF=L_MODEL_HF
+#ifdef usecam
+      LUSE_CAM = LHFCAM
+#endif
 
       IF (NKREDX==1 .AND. NKREDY==1 .AND. NKREDZ==1 .AND. .NOT. EVENONLY .AND. .NOT. ODDONLY ) & 
         HFKIDENT=.FALSE.
@@ -1117,7 +1201,11 @@ CONTAINS
       ENDIF
 
       IF (IU6>=0 .AND. LHFCALC) THEN
+#ifdef usecam
+         WRITE(IU6,10 ) SZGGA,LEXCH,LFCI,EXXOEP,LHFCALC,LSYMGRAD,SZPRECFOCK,LRHFCALC,LHFCAM,LRSCOR,L_THOMAS_FERMI,L_MODEL_HF,ENCUT4O, &
+#else
          WRITE(IU6,10 ) SZGGA,LEXCH,LFCI,EXXOEP,LHFCALC,LSYMGRAD,SZPRECFOCK,LRHFCALC,LRSCOR,L_THOMAS_FERMI,L_MODEL_HF,ENCUT4O, &
+#endif
            LMAX_FOCK,LMAX_FOCKAE,NMAX_FOCKAE,LFOCKAEDFT,NKREDX,NKREDY,NKREDZ,SHIFTRED,HFKIDENT,ODDONLY,EVENONLY,HFALPHA,MCALPHA,AEXX,HFSCREEN,HFSCREENC,HFRCUT, &
            LDAX,AGGAX,ALDAC,AGGAC,ENCUTFOCK,NBANDSGWLOW_FOCK,NBLOCK_FOCK
       ENDIF
@@ -1161,6 +1249,9 @@ CONTAINS
              '   LSYMGRAD=',L6,  '    symmetrize gradient (conserves proper symmetry)'/ &
              '   PRECFOCK=',A6,  '    Normal, Fast or Accurate (Low or Medium for compatibility)'/ &
              '   LRHFCALC=',L6,  '    long range Hartree Fock'/ &
+#ifdef usecam
+             '   LHFCAM  =',L6,  '    CAM Hartree Fock'/ &
+#endif
              '   LRSCOR  =',L6,  '    long range correlation only (use DFT for short range part)'/ &
              '   LTHOMAS =',L6,  '    Thomas Fermi screening in HF'/ &
              '   LMODELHF=',L6,  '    short range full HF, long range fraction AEXX'/ &
@@ -1232,6 +1323,9 @@ CONTAINS
       CALL XML_INCAR('LSYMGRAD','L',IDUM,RDUM,CDUM,LSYMGRAD,CHARAC,N)
       CALL XML_INCAR('LHFONE','L',IDUM,RDUM,CDUM,LHFONE,CHARAC,N)
       CALL XML_INCAR('LRHFCALC','L',IDUM,RDUM,CDUM,LRHFCALC,CHARAC,N)
+#ifdef usecam
+      CALL XML_INCAR('LHFCAM','L',IDUM,RDUM,CDUM,LHFCAM,CHARAC,N)
+#endif
       CALL XML_INCAR('LTHOMAS','L',IDUM,RDUM,CDUM,L_THOMAS_FERMI,CHARAC,N)
       CALL XML_INCAR('LMODELHF','L',IDUM,RDUM,CDUM,L_MODEL_HF,CHARAC,N)
       CALL XML_INCAR('ENCUT4O','F',IDUM,ENCUT4O,CDUM,LDUM,CHARAC,N)
@@ -1800,6 +1894,10 @@ CONTAINS
                ELSE IF (L_THOMAS_FERMI) THEN
                   ! screened Thomas Fermi kernel
                   POTFAK(NI)=SCALE/(GSQU+HFSCREEN*HFSCREEN/(TPI*TPI))
+#ifdef usecam
+               ELSE IF (LHFCAM) THEN
+                  POTFAK(NI)=SCALE/GSQU*(CAMFA+CAMFB*EXP(-GSQU*(TPI*TPI/(4*HFSCREEN*HFSCREEN))))
+#endif
                ELSE IF (LRHFCALC) THEN
                   ! exponentially screened kernel corresponding to erfc( HFSCREEN r)/r 
                   POTFAK(NI)=SCALE/GSQU*EXP(-GSQU*(TPI*TPI/(4*HFSCREEN*HFSCREEN)))
@@ -1979,6 +2077,10 @@ CONTAINS
                POTFAK(NI)=SCALE/(GSQU)
             ELSE IF (L_THOMAS_FERMI) THEN
                POTFAK(NI)=SCALE/(GSQU+HFSCREEN*HFSCREEN/(TPI*TPI))
+#ifdef usecam 
+            ELSE IF (LHFCAM) THEN
+               POTFAK(NI)=SCALE/GSQU*(CAMFA+CAMFB*EXP(-GSQU*(TPI*TPI/(4*HFSCREEN*HFSCREEN))))
+#endif 
             ELSE IF (LRHFCALC) THEN
                POTFAK(NI)=SCALE/GSQU*EXP(-GSQU*(TPI*TPI/(4*HFSCREEN*HFSCREEN)))
             ELSE IF (L_MODEL_HF) THEN
@@ -2236,6 +2338,10 @@ CONTAINS
                         FSG=FSG+FACTM*SCALE*EXP(-GSQU*(HFALPHA*TPI*TPI))/GSQU
                      ELSE IF (L_THOMAS_FERMI) THEN
                         FSG=FSG+FACTM*SCALE*EXP(-GSQU*(HFALPHA*TPI*TPI))/(GSQU+HFSCREEN*HFSCREEN*(1.0_q/(TPI*TPI)))
+#ifdef usecam
+                     ELSE IF (LHFCAM) THEN
+                        FSG=FSG+FACTM*SCALE/GSQU*(CAMFA+CAMFB*EXP(GSQU*((-HFALPHA-1/(4*HFSCREEN*HFSCREEN))*TPI*TPI)))
+#endif
                      ELSE IF (LRHFCALC) THEN
                         ! long range Coulomb kernel
                         FSG=FSG+FACTM*SCALE*EXP(GSQU*((-HFALPHA-1/(4*HFSCREEN*HFSCREEN))*TPI*TPI))/GSQU
@@ -2265,6 +2371,12 @@ CONTAINS
             FSG=-FSG+EDEPS/(TPI**3)*2._q*HFALPHA*(PI/HFALPHA)**(3._q/2._q)
          ELSE IF (L_THOMAS_FERMI) THEN
             FSG=0
+#ifdef usecam
+         ELSE IF (LHFCAM) THEN
+            HFALPHAP=HFALPHA+1/HFSCREEN/HFSCREEN/4
+            FSG=-FSG+CAMFB*EDEPS/(TPI**3)*2._q*HFALPHAP*(PI/HFALPHAP)**(3._q/2._q) + &
+                     CAMFA*EDEPS/(TPI**3)*2._q*HFALPHA *(PI/HFALPHA )**(3._q/2._q)
+#endif
          ELSE IF (LRHFCALC) THEN
             HFALPHAP=HFALPHA+1/HFSCREEN/HFSCREEN/4
             !
@@ -2378,6 +2490,13 @@ CONTAINS
                   EXP_GSQU_DER=SCALE/GSQU2
                ELSE IF (L_THOMAS_FERMI) THEN
                   POTFAK(NI,0)=SCALE/(GSQU+HFSCREEN*HFSCREEN/(TPI*TPI))
+#ifdef usecam
+               ELSE IF (LHFCAM) THEN
+                  POTFAK(NI,0)=(SCALE/GSQU )*(CAMFA+CAMFB*EXP(-GSQU*(TPI*TPI/(4*HFSCREEN*HFSCREEN))))
+                  EXP_GSQU_DER=(SCALE/GSQU2)*(CAMFA+CAMFB*EXP(-GSQU*(TPI*TPI/(4*HFSCREEN*HFSCREEN)))) + &
+                               (SCALE/GSQU )*(CAMFB*EXP(-GSQU*(TPI*TPI/(4*HFSCREEN*HFSCREEN))))* & 
+                                             (TPI*TPI/(4*HFSCREEN*HFSCREEN))
+#endif
                ELSE IF (LRHFCALC) THEN
                   POTFAK(NI,0)=SCALE/GSQU*EXP(-GSQU*(TPI*TPI/(4*HFSCREEN*HFSCREEN)))
                   EXP_GSQU_DER=SCALE*EXP(-GSQU*(TPI*TPI/(4*HFSCREEN*HFSCREEN))) &
@@ -2558,6 +2677,15 @@ CONTAINS
                         FSG(0)=FSG(0)+FACTM*SCALE*EXP(-GSQU*(HFALPHA*TPI*TPI))/(GSQU+HFSCREEN*HFSCREEN*(1.0_q/(TPI*TPI)))
                         WRITE(*,*) 'Stress not implemented'
                         STOP
+#ifdef usecam
+                     ELSE IF (LHFCAM) THEN
+                        FSG(0)=FSG(0)+FACTM*SCALE*EXP(-GSQU*(HFALPHA*TPI*TPI))/GSQU &
+                                    *(CAMFA+CAMFB*EXP(-GSQU*(TPI*TPI/(4*HFSCREEN*HFSCREEN))))
+                        EXP_GSQU_DER=FACTM * SCALE*EXP(-GSQU*(HFALPHA*TPI*TPI))*(1/GSQU2+(HFALPHA*TPI*TPI)/GSQU) &
+                                           *(CAMFA+CAMFB*EXP(-GSQU*(TPI*TPI/(4*HFSCREEN*HFSCREEN))))+ &
+                                     FACTM * SCALE*EXP(-GSQU*(HFALPHA*TPI*TPI))/GSQU* &
+                                             CAMFB*EXP(-GSQU*(TPI*TPI/(4*HFSCREEN*HFSCREEN)))*(TPI*TPI/(4*HFSCREEN*HFSCREEN))
+#endif
                      ELSE IF (LRHFCALC) THEN
                         ! long range Coulomb kernel
                         FSG(0)=FSG(0)+FACTM*SCALE*EXP(GSQU*((-HFALPHA-1/(4*HFSCREEN*HFSCREEN))*TPI*TPI))/GSQU
@@ -2613,6 +2741,12 @@ CONTAINS
          ELSE IF (L_THOMAS_FERMI) THEN
             ! Thomas Fermi, no analytical formula but small hence zero it
             FSG=0
+#ifdef usecam
+         ELSE IF (LHFCAM) THEN
+            HFALPHAP=HFALPHA+1/HFSCREEN/HFSCREEN/4
+            FSG(0)=-FSG(0)+CAMFA*EDEPS/(TPI**3._q)*2._q*HFALPHA *(PI/HFALPHA )**(3._q/2._q) + &
+                           CAMFB*EDEPS/(TPI**3._q)*2._q*HFALPHAP*(PI/HFALPHAP)**(3._q/2._q)
+#endif
          ELSE IF (LRHFCALC) THEN
             HFALPHAP=HFALPHA+1/HFSCREEN/HFSCREEN/4
             !
@@ -5166,6 +5300,12 @@ END MODULE fock
       IF (L_MODEL_HF) THEN
          BRSEXX=(1-AEXX)
          BEXX=AEXX
+#ifdef usecam
+      ELSEIF (LHFCAM) THEN
+         BRSEXX=CAMFB
+         BEXX=CAMFA
+         LRHF=.TRUE.
+#endif
       ELSEIF ((HFSCREEN/=0.AND.(.NOT.L_THOMAS_FERMI))) THEN
          BRSEXX=AEXX
          BEXX=0.0
diff --git a/src/xclib.F b/src/xclib.F
index 7321f7d..6ffc569 100644
--- a/src/xclib.F
+++ b/src/xclib.F
@@ -2082,6 +2082,12 @@ END MODULE xclib
       REAL(q),SAVE :: LDASCREENC=0
       ! LRANGE_SEPARATED_CORR=.TRUE.  range separated LDA correlation
       ! LRANGE_SEPARATED_CORR=.FALSE. complete LDA correlation (default)
+#ifdef usecam
+      ! CAM xc(LDA+GGA)
+      LOGICAL,SAVE :: LUSE_CAM = .FALSE.
+      REAL(q),SAVE :: FCAMA    =  0.19_q
+      REAL(q),SAVE :: FCAMB    =  0.36_q
+#endif
       LOGICAL,SAVE :: LRANGE_SEPARATED_CORR=.FALSE.
       ! LUSE_LONGRANGE_HF  short range LDA exchange interaction only
       ! long range contribution is done in HF
@@ -2753,8 +2759,11 @@ END MODULE xclib
    ! local
       REAL(q) :: RS, RH, ZETA, FZA, FZB, &
            RHOTHD, SE, ECLDA, ECD1LDA, ECD2LDA, ECLDA_MAG, A0
-
+#ifdef usecam
+      IF (RHO==0.OR.LUSE_CAM) THEN
+#else
       IF (RHO==0) THEN
+#endif
          EXCP=0._q
          DEXF=0._q
          DECF=0._q
@@ -3147,6 +3156,14 @@ END MODULE xclib
       REAL(q) ECLDA,ECDLDA,ECD2LDA,SK,T,EC,ECD,ECDD,ZETA
       LOGICAL TREL
 
+#ifdef usecam
+      IF (LUSE_CAM) THEN
+         EXC  = 0._q
+         DEXC = 0._q
+         RETURN
+      ENDIF
+#endif
+
       RS = ( (3._q/(4*PI)) / RHO)**(1/3._q) /AUTOA
 
       IF (LEXCH==-1) THEN
@@ -3344,7 +3361,13 @@ END MODULE xclib
     ! local variables
       REAL(q) RS,ZETA,FZ,DFZ,EXP,EC,ECP,VXP,VCP,EXT,VX0,DVX,VX1,VX2,RH, &
               ECF,VXF,VCF,EXF,ALP,VALP,ZETA3,ZETA4
-
+#ifdef usecam
+      IF (LUSE_CAM) THEN
+         EXC  = 0._q
+         EXCD = 0._q
+         RETURN
+      ENDIF
+#endif
       RH=RHO(1)+RHO(2)
       RS = ( (3._q/(4*PI)) / RH)**(1/3._q) /AUTOA
       ZETA=(RHO(1)-RHO(2))/(RHO(1)+RHO(2))
diff --git a/src/xclib_grad.F b/src/xclib_grad.F
index 2df7eb2..b20016f 100644
--- a/src/xclib_grad.F
+++ b/src/xclib_grad.F
@@ -2155,6 +2155,9 @@
                          EXCD2,EXCDD2,EXCDDA)
      USE prec
      USE constant
+#ifdef usecam
+     USE setexm, ONLY: LUSE_CAM
+#endif
      IMPLICIT NONE
      REAL(q) RHO1,RHO2,DRHO1,DRHO2,DRHOA
      REAL(q) EXC,EXCD1,EXCDD1,EXCD2,EXCDD2,EXCDDA
@@ -2170,7 +2173,7 @@
 !
 
      IF (RHO1<0._q .OR. RHO2<0._q ) THEN
-       EXC   = 0._q
+       EXC    = 0._q
        EXCD1  = 0._q
        EXCDD1 = 0._q
        EXCD2  = 0._q
@@ -2179,6 +2182,12 @@
        RETURN
      ENDIF
 
+#ifdef usecam
+     IF (LUSE_CAM) THEN
+       CALL CAMXC(RHO1,RHO2,DRHO1,DRHO2,EXC,EXCD1,EXCD2,EXCDD1,EXCDD2)
+       RETURN
+     ENDIF
+#endif
 ! Exchange-correlation energy
 
      EXC=EXCB3LYP(RHO1,RHO2,DRHO1,DRHO2,DRHOA)
@@ -2194,7 +2203,37 @@
 !     WRITE(91,'(6F12.7)') RHO1, RHO2, EXCD1, EXCD2, EXCDD1, EXCDD2
 
      END SUBROUTINE B3LYPXCS
-
+#ifdef usecam
+!***********************************************************************
+! CAMXC modified cam codes by Musen
+!***********************************************************************
+    SUBROUTINE CAMXC(R1,R2,D1,D2,EXC,VR1,VR2,VD1,VD2)
+      USE prec
+      USE setexm, ONLY: FCAMA,FCAMB,LDASCREEN,AGGAC,ALDAC
+      USE cam,    ONLY: SPNCAM,LYP,VWN
+      USE constant
+      IMPLICIT NONE
+      REAL(q), INTENT(in)  :: R1,R2,D1,D2
+      REAL(q), INTENT(out) :: EXC,VR1,VR2
+      REAL(q), INTENT(out) :: VD1,VD2
+!     Local variables 
+      REAL(q)  ECAM1,ECAM2,ECAM
+      REAL(q)  VCAM1,VCAM2,VCAM
+      REAL(q)  ELYP,EVWN
+      REAL(q)  VLYP1,VLYP2
+      REAL(q)  VVWN1,VVWN2
+      REAL(q)  DLYP1,DLYP2
+      REAL(q)  DCAM1,DCAM2
+      EXC   = 0._q
+      VR1   = 0._q
+      VR2   = 0._q
+      VD1   = 0._q
+      VD2   = 0._q
+      IF (R1.LT.1E-6_q.OR.R2.LT.1E-6_q) RETURN
+      CALL SPNCAM(R1,R2,D1,D2,EXC,VR1,VR2,VD1,VD2,LDASCREEN*AUTOA,FCAMA,FCAMB,AGGAC,ALDAC)
+      RETURN
+    END SUBROUTINE CAMXC
+#endif
 !***********************************************************************
 !
 ! B3LYP exchange and correlation energy
